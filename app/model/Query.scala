package model

import java.io.{File, FileInputStream, ObjectInputStream}

import LSH.hashFunctions.{CrossPolytope, Hyperplane}
import LSH.structures.LSHStructure
import tools.Cosine
import IO.Parser

import scala.collection.mutable.ArrayBuffer
import scala.util.Random

/**
  * Created by remeeh on 02-11-2016.
  */

object Query {
  // Load LSHStructure
  // TODO Get path
/*  val ois = new ObjectInputStream(new FileInputStream("data/Hyperplane_16_11.lshstructure"))
  println("Loading started!")
  val lshs: LSHStructure = ois.readObject.asInstanceOf[LSHStructure]
  ois.close()*/
  // TODO CHANGE THIS !!!!
  val seed:Long = System.currentTimeMillis()
  val rnd = new Random(seed)
  val lshs = new LSHStructure(new File("data/descriptors-decaf-random-sample-reduced-20000000.data"), () => new CrossPolytope(14, () => new Random(rnd.nextLong())), 4)
  println("Structure Loaded!")

  // return the result generated by
  def getResults(imageId:String, range:Double, k:Int) : List[((String, Vector[Double]), Double)] = {

    // Find tuple for imageId
    val fVector = lshs.hashTables(0).table.valuesIterator.flatMap(x => x).find {
      case (x) => x._1.equals(imageId)
    }

    val res = lshs.query(fVector.head, range, Cosine)

    val res2 = res.zip(res.map(x => (Cosine.measure(fVector.head._2, x._2)))).sortBy(_._2)
    println(res2.length)
    res2.toList.take(k)

  }

}

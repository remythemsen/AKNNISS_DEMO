package model

import java.io.{File, FileInputStream, ObjectInputStream}

import LSH.hashFunctions.Hyperplane
import LSH.structures.LSHStructure
import tools.Cosine
import IO.Parser

import scala.collection.mutable.ArrayBuffer

/**
  * Created by remeeh on 02-11-2016.
  */

object Query {
  // Load LSHStructure
  // TODO Get path
  val ois = new ObjectInputStream(new FileInputStream("data/Crosspolytope_10_4.lshstructure"))
  println("Loading started!")
  val lshs: LSHStructure = ois.readObject.asInstanceOf[LSHStructure]
  ois.close()
  //val lshs = new LSHStructure(new File("data/descriptors-mini.data"), () => new Hyperplane(12), 4)
  println("Structure Loaded!")

  // return the result generated by
  def getResults(imageId:String, range:Double, k:Int) = {
    // Find tuple for imageId
    val qVector = lshs.hashTables(0).table.valuesIterator.find {
      case (x) => x.head._1.equals(imageId)
    }

    lshs.query(qVector.head.head, k, range, Cosine)
  }

}

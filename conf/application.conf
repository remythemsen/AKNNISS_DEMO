
akka {
  loglevel = "INFO"

  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  actor {
    provider = "remote"

    serialization-bindings {
      "java.io.Serializable" = kryo
      //      "utils.utils.tools.actorMessages.InitializeTables" = kryo
      //      "utils.utils.tools.actorMessages.Query" = kryo
      //      "utils.utils.tools.actorMessages.QueryResult" = kryo
      //      "utils.utils.tools.actorMessages.TableHandlerStatus" = kryo
      //      "utils.utils.tools.actorMessages.TableStatus" = kryo
      //      "utils.utils.tools.actorMessages.Status" = kryo
      //      "utils.utils.tools.actorMessages.InProgress" = kryo
      //      "utils.utils.tools.actorMessages.NotReady" = kryo
      //      "utils.utils.tools.actorMessages.Ready" = kryo
      //      "scala.collection.mutable.ArrayBuffer" = kryo
      //      "[Lutils.utils.tools.actorMessages.Status" = kryo
    }
    serializers {
      java = "akka.serialization.JavaSerializer"
      # Define kryo serializer
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    kryo  {
      type = "nograph"
      idstrategy = "default"
      buffer-size = 4096
      max-buffer-size = -1
      use-manifests = false
      implicit-registration-logging = true
      resolve-subclasses = true
      kryo-trace = false
      mappings {
        //        "utils.utils.tools.actorMessages.InitializeTables" = 20,
        //        "utils.utils.tools.actorMessages.Query" = 21,
        //        "utils.utils.tools.actorMessages.QueryResult" = 22,
        //        "utils.utils.tools.actorMessages.TableHandlerStatus" = 23,
        //        "utils.utils.tools.actorMessages.TableStatus" = 24,
        //        "utils.utils.tools.actorMessages.Status" = 25,
        //        "utils.utils.tools.actorMessages.InProgress" = 26,
        //        "utils.utils.tools.actorMessages.NotReady" = 27,
        //        "utils.utils.tools.actorMessages.Ready" = 28,
        //        "scala.collection.mutable.ArrayBuffer" = 29
        #"[Lutils.utils.tools.actorMessages.Status" = 30
      }
    }
  }


  remote {
    //enabled-transports = ["akka.remote.netty.tcp"]
    transport = "akka.remote.netty.NettyRemoteTransport"
    maximum-payload-bytes = 30000000 bytes
    netty.tcp {
      message-frame-size =  30000000b
      send-buffer-size =  30000000b
      receive-buffer-size =  30000000b
      maximum-frame-size = 30000000b
    }
  }
  log-dead-letters = 0
  log-dead-letters-during-shutdown = off

}
# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="%APPLICATION_SECRET%"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
#global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

